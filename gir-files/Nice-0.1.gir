<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="nice"/>
  <namespace name="Nice"
             shared-library="libnice.so.10"
             c:identifier-prefixes="Nice"
             c:symbol-prefixes="nice">
    <function-macro name="AGENT" c:identifier="NICE_AGENT" introspectable="0">
      <source-position filename="agent/agent.h" line="229"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AGENT_CLASS"
                    c:identifier="NICE_AGENT_CLASS"
                    introspectable="0">
      <source-position filename="agent/agent.h" line="233"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AGENT_GET_CLASS"
                    c:identifier="NICE_AGENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="agent/agent.h" line="245"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="AGENT_MAX_REMOTE_CANDIDATES"
              value="25"
              c:type="NICE_AGENT_MAX_REMOTE_CANDIDATES">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="260">A hard limit for the number of remote candidates. This
limit is enforced to protect against malevolent remote
clients.</doc>
      <source-position filename="agent/agent.h" line="267"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Address" c:type="NiceAddress">
      <doc xml:space="preserve"
           filename="agent/address.h"
           line="68">The #NiceAddress structure that represents an IPv4 or IPv6 address.</doc>
      <source-position filename="agent/address.h" line="81"/>
      <union name="s" c:type="s">
        <source-position filename="agent/address.h" line="80"/>
        <field name="addr" writable="1">
          <type name="gpointer" c:type="sockaddr"/>
        </field>
        <field name="ip4" writable="1">
          <type name="gpointer" c:type="sockaddr_in"/>
        </field>
        <field name="ip6" writable="1">
          <type name="gpointer" c:type="sockaddr_in6"/>
        </field>
      </union>
      <method name="copy_to_sockaddr"
              c:identifier="nice_address_copy_to_sockaddr">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="218">Fills the sockaddr structure @sin with the address contained in @addr</doc>
        <source-position filename="agent/address.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="220">The #NiceAddress to query</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
          <parameter name="sin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="221">The sockaddr to fill</doc>
            <type name="gpointer" c:type="sockaddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="nice_address_dup" introspectable="0">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="125">Creates a new #NiceAddress with the same address as @addr</doc>
        <source-position filename="agent/address.h" line="134"/>
        <return-value>
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="131">The new #NiceAddress</doc>
          <type name="Address" c:type="NiceAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="127">The #NiceAddress to dup</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nice_address_equal">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="229">Compares two #NiceAddress structures to see if they contain the same address
and the same port.</doc>
        <source-position filename="agent/address.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="237">%TRUE if @a and @b are the same address, %FALSE if they are different</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="231">First #NiceAddress to compare</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="232">Second #NiceAddress to compare</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal_no_port"
              c:identifier="nice_address_equal_no_port"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="242">Compares two #NiceAddress structures to see if they contain the same address,
ignoring the port.</doc>
        <source-position filename="agent/address.h" line="256"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="250">%TRUE if @a and @b are the same address, %FALSE if they
are different</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="244">First #NiceAddress to compare</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="245">Second #NiceAddress to compare</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nice_address_free">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="116">Frees a #NiceAddress created with nice_address_new() or nice_address_dup()</doc>
        <source-position filename="agent/address.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="118">The #NiceAddress to free</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="nice_address_get_port">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="183">Retreive the port of @addr</doc>
        <source-position filename="agent/address.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="189">The port of @addr</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="185">The #NiceAddress to query</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="nice_address_init">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="96">Initialize a #NiceAddress into an undefined address</doc>
        <source-position filename="agent/address.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="98">The #NiceAddress to init</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ip_version" c:identifier="nice_address_ip_version">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="292">Returns the IP version of the address</doc>
        <source-position filename="agent/address.h" line="302"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="298">4 for IPv4, 6 for IPv6 and 0 for undefined address</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="294">The #NiceAddress to query</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_private" c:identifier="nice_address_is_private">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="269">Verifies if the address in @addr is a private address or not</doc>
        <source-position filename="agent/address.h" line="278"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="275">%TRUE if @addr is a private address, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="271">The #NiceAddress to query</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="nice_address_is_valid">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="280">Validate whether the #NiceAddress @addr is a valid IPv4 or IPv6 address</doc>
        <source-position filename="agent/address.h" line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="286">%TRUE if @addr is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="282">The #NiceAddress to query</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_from_sockaddr"
              c:identifier="nice_address_set_from_sockaddr">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="206">Sets an IPv4 or IPv6 address from the sockaddr structure @sin</doc>
        <source-position filename="agent/address.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="208">The #NiceAddress to modify</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
          <parameter name="sin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="209">The sockaddr to set</doc>
            <type name="gpointer" c:type="const sockaddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_from_string"
              c:identifier="nice_address_set_from_string">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="194">Sets an IPv4 or IPv6 address from the string @str</doc>
        <source-position filename="agent/address.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="201">%TRUE if success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="196">The #NiceAddress to modify</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="197">The string to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ipv4" c:identifier="nice_address_set_ipv4">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="137">Set @addr to an IPv4 address using the data from @addr_ipv4

 &lt;note&gt;
  &lt;para&gt;
   This function will reset the port to 0, so make sure you call it before
   nice_address_set_port()
  &lt;/para&gt;
 &lt;/note&gt;</doc>
        <source-position filename="agent/address.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="139">The #NiceAddress to modify</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
          <parameter name="addr_ipv4" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="140">The IPv4 address</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ipv6" c:identifier="nice_address_set_ipv6">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="155">Set @addr to an IPv6 address using the data from @addr_ipv6

 &lt;note&gt;
  &lt;para&gt;
   This function will reset the port to 0, so make sure you call it before
   nice_address_set_port()
  &lt;/para&gt;
 &lt;/note&gt;</doc>
        <source-position filename="agent/address.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="157">The #NiceAddress to modify</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
          <parameter name="addr_ipv6" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="158">The IPv6 address</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="nice_address_set_port">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="173">Set the port of @addr to @port</doc>
        <source-position filename="agent/address.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="175">The #NiceAddress to modify</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="176">The port to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="nice_address_to_string">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="258">Transforms the address @addr into a human readable string</doc>
        <source-position filename="agent/address.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="260">The #NiceAddress to query</doc>
            <type name="Address" c:type="const NiceAddress*"/>
          </instance-parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/address.h"
                 line="261">The string to fill</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <function name="new" c:identifier="nice_address_new" introspectable="0">
        <doc xml:space="preserve"
             filename="agent/address.h"
             line="105">Create a new #NiceAddress with undefined address
You must free it with nice_address_free()</doc>
        <source-position filename="agent/address.h" line="114"/>
        <return-value>
          <doc xml:space="preserve"
               filename="agent/address.h"
               line="111">The new #NiceAddress</doc>
          <type name="Address" c:type="NiceAddress*"/>
        </return-value>
      </function>
    </record>
    <class name="Agent"
           c:symbol-prefix="agent"
           c:type="NiceAgent"
           parent="GObject.Object"
           glib:type-name="NiceAgent"
           glib:get-type="nice_agent_get_type"
           glib:type-struct="AgentClass">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="150">The #NiceAgent is the main GObject of the libnice library and represents
the ICE agent.</doc>
      <source-position filename="agent/agent.h" line="254"/>
      <constructor name="new" c:identifier="nice_agent_new">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="443">Create a new #NiceAgent.
The returned object must be freed with g_object_unref()</doc>
        <source-position filename="agent/agent.h" line="454"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="451">The new agent GObject</doc>
          <type name="Agent" c:type="NiceAgent*"/>
        </return-value>
        <parameters>
          <parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="445">The Glib Mainloop Context to use for timers</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="compat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="446">The compatibility mode of the agent</doc>
            <type name="Compatibility" c:type="NiceCompatibility"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="nice_agent_new_full"
                   version="0.1.15">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="475">Create a new #NiceAgent with parameters that must be be defined at
construction time.
The returned object must be freed with g_object_unref()
&lt;para&gt; See also: #NiceNominationMode and #NiceAgentOption&lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="491"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="488">The new agent GObject</doc>
          <type name="Agent" c:type="NiceAgent*"/>
        </return-value>
        <parameters>
          <parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="477">The Glib Mainloop Context to use for timers</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="compat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="478">The compatibility mode of the agent</doc>
            <type name="Compatibility" c:type="NiceCompatibility"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="479">Flags to set the properties</doc>
            <type name="AgentOption" c:type="NiceAgentOption"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_reliable"
                   c:identifier="nice_agent_new_reliable"
                   version="0.0.11">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="457">Create a new #NiceAgent in reliable mode. If the connectivity is established
through ICE-UDP, then a #PseudoTcpSocket will be transparently used to
ensure reliability of the messages.
The returned object must be freed with g_object_unref()
&lt;para&gt; See also: #NiceAgent::reliable-transport-writable &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="473"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="470">The new agent GObject</doc>
          <type name="Agent" c:type="NiceAgent*"/>
        </return-value>
        <parameters>
          <parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="459">The Glib Mainloop Context to use for timers</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="compat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="460">The compatibility mode of the agent</doc>
            <type name="Compatibility" c:type="NiceCompatibility"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_local_address"
              c:identifier="nice_agent_add_local_address">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="495">Add a local address from which to derive local host candidates for
candidate gathering.
&lt;para&gt;
Since 0.0.5, if this method is not called, libnice will automatically
discover the local addresses available
&lt;/para&gt;

See also: nice_agent_gather_candidates()</doc>
        <source-position filename="agent/agent.h" line="512"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="509">%TRUE on success, %FALSE on fatal (memory allocation) errors</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="497">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="498">The address to listen to
If the port is 0, then a random port will be chosen by the system</doc>
            <type name="Address" c:type="NiceAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_stream" c:identifier="nice_agent_add_stream">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="514">Adds a data stream to @agent containing @n_components components. The
returned stream ID is guaranteed to be positive on success.</doc>
        <source-position filename="agent/agent.h" line="525"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="522">The ID of the new stream, 0 on failure</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="516">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="n_components" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="517">The number of components to add to the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_recv"
              c:identifier="nice_agent_attach_recv"
              introspectable="0">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="951">Attaches the stream's component's sockets to the Glib Mainloop Context in
order to be notified whenever data becomes available for a component,
and to enable #NiceAgent to receive STUN messages (during the
establishment of ICE connectivity).

This must not be used in combination with nice_agent_recv_messages() (or
#NiceIOStream or #NiceInputStream) on the same stream/component pair.

Calling nice_agent_attach_recv() with a %NULL @func will detach any existing
callback and cause reception to be paused for the given stream/component
pair. You must iterate the previously specified #GMainContext sufficiently to
ensure all pending I/O callbacks have been received before calling this
function to unset @func, otherwise data loss of received packets may occur.</doc>
        <source-position filename="agent/agent.h" line="979"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="976">%TRUE on success, %FALSE if the stream or component IDs are invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="953">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="954">The ID of stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="955">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="956">The Glib Mainloop Context to use for listening on the component</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" closure="4">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="957">The callback function to be called when data is received on
the stream's component (will not be called for STUN messages that
should be handled by #NiceAgent itself)</doc>
            <type name="AgentRecvFunc" c:type="NiceAgentRecvFunc"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="960">user data associated with the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_async"
              c:identifier="nice_agent_close_async"
              version="0.1.16">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1662">Asynchronously closes resources the agent has allocated on remote servers.

The agent will call the callback in the current #GMainContext in
which this function is called. The #GAsyncResult in the callback
can be ignored as this operation never fails.

Calling this function before freeing the agent makes sure the allocated relay
ports aren't left behind on TURN server but properly removed.</doc>
        <source-position filename="agent/agent.h" line="1681"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1664">The #NiceAgent object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1665">A callback that will be called when the closing is
 complete</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1667">A pointer that will be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="forget_relays"
              c:identifier="nice_agent_forget_relays"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1601">Forget all the relay servers previously added using
nice_agent_set_relay_info(). Currently connected streams will keep
using the relay as long as they have not been restarted and haven't
succesfully negotiated a different path.</doc>
        <source-position filename="agent/agent.h" line="1617"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1612">%FALSE if the component could not be found, %TRUE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1603">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1604">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1605">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="gather_candidates"
              c:identifier="nice_agent_gather_candidates">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="600">Allocate and start listening on local candidate ports and start the remote
candidate gathering process.
Once done, #NiceAgent::candidate-gathering-done is called for the stream.
As soon as this function is called, #NiceAgent::new-candidate signals may be
emitted, even before this function returns.

nice_agent_get_local_candidates() will only return non-empty results after
calling this function.

&lt;para&gt;See also: nice_agent_add_local_address()&lt;/para&gt;
&lt;para&gt;See also: nice_agent_set_port_range()&lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="632"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="617">%FALSE if the stream ID is invalid or if a host candidate couldn't
be allocated on the requested interfaces/ports; %TRUE otherwise

 &lt;note&gt;
   &lt;para&gt;
    Local addresses can be previously set with nice_agent_add_local_address()
  &lt;/para&gt;
  &lt;para&gt;
    Since 0.0.5, If no local address was previously added, then the nice agent
    will automatically detect the local address using
    nice_interfaces_get_local_ips()
   &lt;/para&gt;
 &lt;/note&gt;</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="602">The #NiceAgent object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="603">The ID of the stream to start</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_local_candidate_sdp"
              c:identifier="nice_agent_generate_local_candidate_sdp"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1466">Generate an SDP string representing a local candidate.

&lt;para&gt;See also: nice_agent_parse_remote_candidate_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_stream_sdp() &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1483"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1477">A string representing the SDP for the candidate. Must be freed
with g_free() once done.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1468">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1469">The candidate to generate</doc>
            <type name="Candidate" c:type="NiceCandidate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_local_sdp"
              c:identifier="nice_agent_generate_local_sdp"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1385">Generate an SDP string containing the local candidates and credentials for
all streams and components in the agent.

 &lt;note&gt;
   &lt;para&gt;
     The SDP will not contain any codec lines and the 'm' line will not list
     any payload types.
   &lt;/para&gt;
   &lt;para&gt;
    It is highly recommended to set names on the streams prior to calling this
    function. Unnamed streams will show up as '-' in the 'm' line, but the SDP
    will not be parseable with nice_agent_parse_remote_sdp() if a stream is
    unnamed.
   &lt;/para&gt;
   &lt;para&gt;
     The default candidate in the SDP will be selected based on the lowest
     priority candidate for the first component.
   &lt;/para&gt;
 &lt;/note&gt;

&lt;para&gt;See also: nice_agent_set_stream_name() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_stream_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_candidate_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_get_default_local_candidate() &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1421"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1415">A string representing the local SDP. Must be freed with g_free()
once done.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1387">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="generate_local_stream_sdp"
              c:identifier="nice_agent_generate_local_stream_sdp"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1424">Generate an SDP string containing the local candidates and credentials
for a stream.

 &lt;note&gt;
   &lt;para&gt;
     The SDP will not contain any codec lines and the 'm' line will not list
     any payload types.
   &lt;/para&gt;
   &lt;para&gt;
    It is highly recommended to set the name of the stream prior to calling this
    function. Unnamed streams will show up as '-' in the 'm' line.
   &lt;/para&gt;
   &lt;para&gt;
     The default candidate in the SDP will be selected based on the lowest
     priority candidate.
   &lt;/para&gt;
 &lt;/note&gt;

&lt;para&gt;See also: nice_agent_set_stream_name() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_stream_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_candidate_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_get_default_local_candidate() &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1461"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1455">A string representing the local SDP for the stream. Must be freed
with g_free() once done.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1426">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1427">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="include_non_ice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1428">Whether or not to include non ICE specific lines
(m=, c= and a=rtcp: lines)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_component_state"
              c:identifier="nice_agent_get_component_state"
              version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1621">Retrieves the current state of a component.</doc>
        <source-position filename="agent/agent.h" line="1635"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1629">the #NiceComponentState of the component and
%NICE_COMPONENT_STATE_FAILED if the component was invalid.</doc>
          <type name="ComponentState" c:type="NiceComponentState"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1623">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1624">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1625">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_local_candidate"
              c:identifier="nice_agent_get_default_local_candidate">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1358">This helper function will return the recommended default candidate to be
used for non-ICE compatible clients. This will usually be the candidate
with the lowest priority, since it will be the longest path but the one with
the most chances of success.
&lt;note&gt;
     &lt;para&gt;
     This function is only useful in order to manually generate the
     local SDP
     &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="1380"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1375">The candidate to be used as the default candidate, or %NULL in case
of error. Must be freed with nice_candidate_free() once done.</doc>
          <type name="Candidate" c:type="NiceCandidate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1360">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1361">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1362">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_io_stream"
              c:identifier="nice_agent_get_io_stream"
              version="0.1.5">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1563">Gets a #GIOStream wrapper around the given stream and component in
@agent. The I/O stream will be valid for as long as @stream_id is valid.
The #GInputStream and #GOutputStream implement #GPollableInputStream and
#GPollableOutputStream.

This function may only be called on reliable #NiceAgents. It is a
programming error to try and create an I/O stream wrapper for an
unreliable stream.</doc>
        <source-position filename="agent/agent.h" line="1583"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1578">A #GIOStream.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1565">A #NiceAgent</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1566">The ID of the stream to wrap</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1567">The ID of the component to wrap</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_local_candidates"
              c:identifier="nice_agent_get_local_candidates">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="856">Retrieve from the agent the list of all local candidates
for a stream's component

 &lt;note&gt;
   &lt;para&gt;
     The caller owns the returned GSList as well as the candidates contained
     within it.
     To get full results, the client should wait for the
     #NiceAgent::candidate-gathering-done signal.
   &lt;/para&gt;
 &lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="878"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="874">a #GSList of
#NiceCandidate objects representing the local candidates of @agent</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Candidate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="858">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="859">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="860">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_local_credentials"
              c:identifier="nice_agent_get_local_credentials">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="697">Gets the local credentials for stream @stream_id. This may be called any time
after creating a stream using nice_agent_add_stream().

An error will be returned if this is called for a non-existent stream, or if
either of @ufrag or @pwd are %NULL.</doc>
        <source-position filename="agent/agent.h" line="715"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="712">%TRUE on success, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="699">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="700">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ufrag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="701">return location for a nul-terminated string
containing an ICE username fragment; must be freed with g_free()</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="pwd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="703">return location for a nul-terminated string
containing an ICE password; must be freed with g_free()</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_candidates"
              c:identifier="nice_agent_get_remote_candidates">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="884">Get a list of the remote candidates set on a stream's component

 &lt;note&gt;
   &lt;para&gt;
     The caller owns the returned GSList as well as the candidates contained
     within it.
   &lt;/para&gt;
   &lt;para&gt;
     The list of remote candidates can change during processing.
     The client should register for the #NiceAgent::new-remote-candidate signal
     to get notified of new remote candidates.
   &lt;/para&gt;
 &lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="908"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="904">a #GSList of
#NiceCandidates objects representing the remote candidates set on the @agent</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Candidate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="886">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="887">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="888">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_pair"
              c:identifier="nice_agent_get_selected_pair">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1189">Retreive the selected candidate pair for media transmission
for a given stream's component.</doc>
        <source-position filename="agent/agent.h" line="1203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1200">%TRUE on success, %FALSE if there is no selected candidate pair</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1191">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1192">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1193">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="local" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1194">The local selected candidate</doc>
            <type name="Candidate" c:type="NiceCandidate**"/>
          </parameter>
          <parameter name="remote" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1195">The remote selected candidate</doc>
            <type name="Candidate" c:type="NiceCandidate**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected_socket"
              c:identifier="nice_agent_get_selected_socket"
              version="0.1.5">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1210">Retreive the local socket associated with the selected candidate pair
for media transmission for a given stream's component.

This is useful for adding ICE support to legacy applications that already
have a protocol that maintains a connection. If the socket is duplicated
before unrefing the agent, the application can take over and continue to use
it. New applications are encouraged to use the built in libnice stream
handling instead and let libnice handle the connection maintenance.

Users of this method are encouraged to not use a TURN relay or any kind
of proxy, as in this case, the socket will not be available to the
application because the packets are encapsulated.</doc>
        <source-position filename="agent/agent.h" line="1236"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1229">pointer to the #GSocket, or %NULL if
there is no selected candidate or if the selected candidate is a relayed
candidate.</doc>
          <type name="Gio.Socket" c:type="GSocket*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1212">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1213">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1214">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sockets"
              c:identifier="nice_agent_get_sockets"
              version="0.1.17">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1684">Each component can have multiple sockets, this is an API to retrieve them all
to be able to set properties. Most of the sockets for a component are created when
calling nice_agent_gather_candidates(), so this API should be called right after to
able to set properties on the sockets before they are used.

These sockets can be a mix of UDP &amp; TCP sockets depending on the compatibility mode
and options that have been set.</doc>
        <source-position filename="agent/agent.h" line="1705"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1698">An array
containing all of the sockets for this component. Free with
g_ptr_array_unref() when done.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Gio.Socket"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1686">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1687">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1688">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stream_name"
              c:identifier="nice_agent_get_stream_name"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1339">This function will return the name assigned to a stream.

&lt;para&gt;See also: nice_agent_set_stream_name()&lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1354"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1348">The name of the stream. The name is only valid while the stream
exists or until it changes through a call to nice_agent_set_stream_name().</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1341">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1342">The ID of the stream to change</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_remote_candidate_sdp"
              c:identifier="nice_agent_parse_remote_candidate_sdp"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1541">Parse an SDP string and extracts the candidate from it.

&lt;para&gt;See also: nice_agent_generate_local_candidate_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_stream_sdp() &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1558"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1553">The parsed candidate or %NULL if there was an error.</doc>
          <type name="Candidate" c:type="NiceCandidate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1543">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1544">The ID of the stream the candidate belongs to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="sdp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1545">The remote SDP to parse</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_remote_sdp"
              c:identifier="nice_agent_parse_remote_sdp"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1487">Parse an SDP string and extracts candidates and credentials from it and sets
them on the agent.

&lt;para&gt;See also: nice_agent_set_stream_name() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_generate_local_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_stream_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_candidate_sdp() &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1505"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1500">The number of candidates added, negative on errors</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1489">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="sdp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1490">The remote SDP to parse</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_remote_stream_sdp"
              c:identifier="nice_agent_parse_remote_stream_sdp"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1510">Parse an SDP string representing a single stream and extracts candidates
and credentials from it.

&lt;para&gt;See also: nice_agent_generate_local_stream_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_sdp() &lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_candidate_sdp() &lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1533"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1527">A #GSList of
candidates parsed from the SDP, or %NULL in case of errors</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Candidate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1512">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1513">The ID of the stream to parse</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="sdp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1514">The remote SDP to parse</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ufrag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1515">Pointer to store the ice ufrag if non %NULL. Must be freed with
g_free() after use</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="pwd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1517">Pointer to store the ice password if non %NULL. Must be freed with
g_free() after use</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="peer_candidate_gathering_done"
              c:identifier="nice_agent_peer_candidate_gathering_done"
              version="0.1.16">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1639">Notifies the agent that the remote peer has concluded candidate gathering and
thus no more remote candidates are expected to arrive for @stream_id.

This will allow the stream components without a successful connectivity check
to stop waiting for more candidates to come and finally transit into
%NICE_COMPONENT_STATE_FAILED.

Calling the function has an effect only when #NiceAgent:trickle-ice is %TRUE.</doc>
        <source-position filename="agent/agent.h" line="1658"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1653">%FALSE if the stream could not be found, %TRUE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1641">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1642">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="recv"
              c:identifier="nice_agent_recv"
              version="0.1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="987">A single-message version of nice_agent_recv_messages().</doc>
        <source-position filename="agent/agent.h" line="1008"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1001">the number of bytes written to @buf on success (guaranteed to be
greater than 0 unless @buf_len is 0), 0 if in reliable mode and the remote
peer closed the stream, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="989">a #NiceAgent</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="990">the ID of the stream to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="991">the ID of the component to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="buf"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="992">caller-allocated buffer
to write the received data into, of length at least @buf_len</doc>
            <array length="3" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="buf_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="994">length of @buf</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="995">a #GCancellable to allow the operation to be
cancelled from another thread, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="recv_messages"
              c:identifier="nice_agent_recv_messages"
              version="0.1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1017">Block on receiving data from the given stream/component combination on
@agent, returning only once exactly @n_messages messages have been received
and written into @messages, the stream is closed by the other end or by
calling nice_agent_remove_stream(), or @cancellable is cancelled.

Any STUN packets received will not be added to @messages; instead,
they'll be passed for processing to #NiceAgent itself. Since #NiceAgent
does not poll for messages on its own, it's therefore essential to keep
calling this function for ICE connection establishment to work.

In the non-error case, in reliable mode, this will block until all buffers in
all @n_messages have been filled with received data (i.e. @messages is
treated as a large, flat array of buffers). In non-reliable mode, it will
block until @n_messages messages have been received, each of which does not
have to fill all the buffers in its #NiceInputMessage. In the non-reliable
case, each #NiceInputMessage must have enough buffers to contain an entire
message (65536 bytes), or any excess data may be silently dropped.

For each received message, #NiceInputMessage::length will be set to the
number of valid bytes stored in the message’s buffers. The bytes are stored
sequentially in the buffers; there are no gaps apart from at the end of the
buffer array (in non-reliable mode). If non-%NULL on input,
#NiceInputMessage::from will have the address of the sending peer stored in
it. The base addresses, sizes, and number of buffers in each message will not
be modified in any case.

This must not be used in combination with nice_agent_attach_recv() on the
same stream/component pair.

If the stream/component pair doesn’t exist, or if a suitable candidate socket
hasn’t yet been selected for it, a %G_IO_ERROR_BROKEN_PIPE error will be
returned. A %G_IO_ERROR_CANCELLED error will be returned if the operation was
cancelled. %G_IO_ERROR_FAILED will be returned for other errors.</doc>
        <source-position filename="agent/agent.h" line="1071"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1064">the number of valid messages written to @messages on success
(guaranteed to be greater than 0 unless @n_messages is 0), 0 if the remote
peer closed the stream, or -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1019">a #NiceAgent</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1020">the ID of the stream to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1021">the ID of the component to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="messages"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1022">caller-allocated
array of #NiceInputMessages to write the received messages into, of length at
least @n_messages</doc>
            <array length="3" zero-terminated="0" c:type="NiceInputMessage*">
              <type name="InputMessage" c:type="NiceInputMessage"/>
            </array>
          </parameter>
          <parameter name="n_messages"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1025">number of entries in @messages</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1026">a #GCancellable to allow the operation to be
cancelled from another thread, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="recv_messages_nonblocking"
              c:identifier="nice_agent_recv_messages_nonblocking"
              version="0.1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1110">Try to receive data from the given stream/component combination on @agent,
without blocking. If receiving data would block, -1 is returned and
%G_IO_ERROR_WOULD_BLOCK is set in @error. If any other error occurs, -1 is
returned and @error is set accordingly. Otherwise, 0 is returned if (and only
if) @n_messages is 0. In all other cases, the number of valid messages stored
in @messages is returned, and will be greater than 0.

This function behaves similarly to nice_agent_recv_messages(), except that it
will not block on filling (in reliable mode) or receiving (in non-reliable
mode) exactly @n_messages messages. In reliable mode, it will receive bytes
into @messages until it would block; in non-reliable mode, it will receive
messages until it would block.

Any STUN packets received will not be added to @messages; instead,
they'll be passed for processing to #NiceAgent itself. Since #NiceAgent
does not poll for messages on its own, it's therefore essential to keep
calling this function for ICE connection establishment to work.

As this function is non-blocking, @cancellable is included only for parity
with nice_agent_recv_messages(). If @cancellable is cancelled before this
function is called, a %G_IO_ERROR_CANCELLED error will be returned
immediately.

This must not be used in combination with nice_agent_attach_recv() on the
same stream/component pair.</doc>
        <source-position filename="agent/agent.h" line="1156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1149">the number of valid messages written to @messages on success
(guaranteed to be greater than 0 unless @n_messages is 0), 0 if in reliable
mode and the remote peer closed the stream, or -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1112">a #NiceAgent</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1113">the ID of the stream to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1114">the ID of the component to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="messages"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1115">caller-allocated
array of #NiceInputMessages to write the received messages into, of length at
least @n_messages</doc>
            <array length="3" zero-terminated="0" c:type="NiceInputMessage*">
              <type name="InputMessage" c:type="NiceInputMessage"/>
            </array>
          </parameter>
          <parameter name="n_messages"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1118">number of entries in @messages</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1119">a #GCancellable to allow the operation to be
cancelled from another thread, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="recv_nonblocking"
              c:identifier="nice_agent_recv_nonblocking"
              version="0.1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1080">A single-message version of nice_agent_recv_messages_nonblocking().</doc>
        <source-position filename="agent/agent.h" line="1101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1094">the number of bytes received into @buf on success (guaranteed to be
greater than 0 unless @buf_len is 0), 0 if in reliable mode and the remote
peer closed the stream, or -1 on error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1082">a #NiceAgent</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1083">the ID of the stream to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1084">the ID of the component to receive on</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="buf"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1085">caller-allocated buffer
to write the received data into, of length at least @buf_len</doc>
            <array length="3" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="buf_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1087">length of @buf</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1088">a #GCancellable to allow the operation to be
cancelled from another thread, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_stream" c:identifier="nice_agent_remove_stream">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="529">Remove and free a previously created data stream from @agent. If any I/O
streams have been created using nice_agent_get_io_stream(), they should be
closed completely using g_io_stream_close() before this is called, or they
will get broken pipe errors.</doc>
        <source-position filename="agent/agent.h" line="541"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="531">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="532">The ID of the stream to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="restart" c:identifier="nice_agent_restart">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="913">Restarts the session as defined in ICE draft 19. This function
needs to be called both when initiating (ICE spec section 9.1.1.1.
"ICE Restarts"), as well as when reacting (spec section 9.2.1.1.
"Detecting ICE Restart") to a restart.</doc>
        <source-position filename="agent/agent.h" line="925"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="922">%TRUE on success %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="915">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="restart_stream"
              c:identifier="nice_agent_restart_stream"
              version="0.1.6">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="928">Restarts a single stream as defined in RFC 5245. This function
needs to be called both when initiating (ICE spec section 9.1.1.1.
"ICE Restarts"), as well as when reacting (spec section 9.2.1.1.
"Detecting ICE Restart") to a restart.

Unlike nice_agent_restart(), this applies to a single stream. It also
does not generate a new tie breaker.</doc>
        <source-position filename="agent/agent.h" line="946"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="941">%TRUE on success %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="930">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="931">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="send" c:identifier="nice_agent_send">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="759">Sends a data payload over a stream's component.

 &lt;note&gt;
   &lt;para&gt;
     Component state MUST be NICE_COMPONENT_STATE_READY, or as a special case,
     in any state if component was in READY state before and was then restarted
   &lt;/para&gt;
   &lt;para&gt;
   In reliable mode, the -1 error value means either that you are not yet
   connected or that the send buffer is full (equivalent to EWOULDBLOCK).
   In both cases, you simply need to wait for the
   #NiceAgent::reliable-transport-writable signal to be fired before resending
   the data.
   &lt;/para&gt;
   &lt;para&gt;
   In non-reliable mode, it will virtually never happen with UDP sockets, but
   it might happen if the active candidate is a TURN-TCP connection that got
   disconnected.
   &lt;/para&gt;
   &lt;para&gt;
   In both reliable and non-reliable mode, a -1 error code could also mean that
   the stream_id and/or component_id are invalid.
   &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="795"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="792">The number of bytes sent, or negative error code</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="761">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="762">The ID of the stream to send to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="763">The ID of the component to send to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="764">The length of the buffer to send</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="765">The buffer of data to send</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_messages_nonblocking"
              c:identifier="nice_agent_send_messages_nonblocking"
              version="0.1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="802">Sends multiple messages on the socket identified by the given
stream/component pair. Transmission is non-blocking, so a
%G_IO_ERROR_WOULD_BLOCK error may be returned if the send buffer is full.

As with nice_agent_send(), the given component must be in
%NICE_COMPONENT_STATE_READY or, as a special case, in any state if it was
previously ready and was then restarted.

On success, the number of messages written to the socket will be returned,
which may be less than @n_messages if transmission would have blocked
part-way through. Zero will be returned if @n_messages is zero, or if
transmission would have blocked on the first message.

In reliable mode, it is instead recommended to use
nice_agent_send().  The return value can be less than @n_messages
or 0 even if it is still possible to send a partial message. In
this case, "nice-agent-writable" will never be triggered, so the
application would have to use nice_agent_sent() to fill the buffer or have
to retry sending at a later point.

On failure, -1 will be returned and @error will be set. If the #NiceAgent is
reliable and the socket is not yet connected, %G_IO_ERROR_BROKEN_PIPE will be
returned; if the write buffer is full, %G_IO_ERROR_WOULD_BLOCK will be
returned. In both cases, wait for the #NiceAgent::reliable-transport-writable
signal before trying again. If the given @stream_id or @component_id are
invalid or not yet connected, %G_IO_ERROR_BROKEN_PIPE will be returned.
%G_IO_ERROR_FAILED will be returned for other errors.</doc>
        <source-position filename="agent/agent.h" line="847"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="842">the number of messages sent (may be zero), or -1 on error</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="804">a #NiceAgent</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="805">the ID of the stream to send to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="806">the ID of the component to send to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="messages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="807">array of messages to send, of at least
@n_messages entries in length</doc>
            <array length="3"
                   zero-terminated="0"
                   c:type="const NiceOutputMessage*">
              <type name="OutputMessage" c:type="NiceOutputMessage"/>
            </array>
          </parameter>
          <parameter name="n_messages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="809">number of entries in @messages</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="810">a #GCancellable to cancel the operation from
another thread, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_credentials"
              c:identifier="nice_agent_set_local_credentials">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="669">Sets the local credentials for stream @stream_id.

 &lt;note&gt;
   &lt;para&gt;
     This is only effective before ICE negotiation has started.
   &lt;/para&gt;
 &lt;/note&gt;

Since 0.1.11</doc>
        <source-position filename="agent/agent.h" line="690"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="687">%TRUE on success, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="671">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="672">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ufrag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="673">nul-terminated string containing an ICE username fragment
   (length must be between 22 and 256 chars)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pwd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="675">nul-terminated string containing an ICE password
   (length must be between 4 and 256 chars)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port_range" c:identifier="nice_agent_set_port_range">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="546">Sets a preferred port range for allocating host candidates.
&lt;para&gt;
If a local host candidate cannot be created on that port
range, then the nice_agent_gather_candidates() call will fail.
&lt;/para&gt;
&lt;para&gt;
This MUST be called before nice_agent_gather_candidates()
&lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="565"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="548">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="549">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="550">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="min_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="551">The minimum port to use</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="max_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="552">The maximum port to use</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_relay_info" c:identifier="nice_agent_set_relay_info">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="572">Sets the settings for using a relay server during the candidate discovery.
This may be called multiple times to add multiple relay servers to the
discovery process; one TCP and one UDP, for example.</doc>
        <source-position filename="agent/agent.h" line="590"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="587">%TRUE if the TURN settings were accepted.
%FALSE if the address was invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="574">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="575">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="576">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="server_ip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="577">The IP address of the TURN server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="server_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="578">The port of the TURN server</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="579">The TURN username to use for the allocate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="580">The TURN password to use for the allocate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="581">The type of relay to use</doc>
            <type name="RelayType" c:type="NiceRelayType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_candidates"
              c:identifier="nice_agent_set_remote_candidates">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="720">Sets, adds or updates the remote candidates for a component of a stream.

 &lt;note&gt;
   &lt;para&gt;
    NICE_AGENT_MAX_REMOTE_CANDIDATES is the absolute maximum limit
    for remote candidates.
   &lt;/para&gt;
   &lt;para&gt;
   You must first call nice_agent_gather_candidates() and wait for the
   #NiceAgent::candidate-gathering-done signale before
   calling nice_agent_set_remote_candidates()
   &lt;/para&gt;
   &lt;para&gt;
    Since 0.1.3, there is no need to wait for the candidate-gathering-done signal.
    Remote candidates can be set even while gathering local candidates.
    Newly discovered local candidates will automatically be paired with
    existing remote candidates.
   &lt;/para&gt;
 &lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="752"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="748">The number of candidates added, negative on errors (memory
allocation error or invalid component)</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="722">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="723">The ID of the stream the candidates are for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="724">The ID of the component the candidates are for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="candidates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="725">a #GSList of
#NiceCandidate items describing each candidate to add</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="Candidate"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_credentials"
              c:identifier="nice_agent_set_remote_credentials">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="636">Sets the remote credentials for stream @stream_id.

 &lt;note&gt;
   &lt;para&gt;
     Stream credentials do not override per-candidate credentials if set
   &lt;/para&gt;
   &lt;para&gt;
     Due to the native of peer-reflexive candidates, any agent using a per-stream
     credentials (RFC5245, WLM2009, OC2007R2 and DRAFT19) instead of
     per-candidate credentials (GOOGLE, MSN, OC2007), must
     use the nice_agent_set_remote_credentials() API instead of setting the
     username and password on the candidates.
   &lt;/para&gt;
 &lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="663"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="660">%TRUE on success, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="638">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="639">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ufrag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="640">nul-terminated string containing an ICE username fragment
   (length must be between 22 and 256 chars)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pwd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="642">nul-terminated string containing an ICE password
   (length must be between 4 and 256 chars)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_pair"
              c:identifier="nice_agent_set_selected_pair">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1165">Sets the selected candidate pair for media transmission
for a given stream's component. Calling this function will
disable all further ICE processing (connection check,
state machine updates, etc). Note that keepalives will
continue to be sent.</doc>
        <source-position filename="agent/agent.h" line="1182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1179">%TRUE on success, %FALSE if the candidate pair cannot be found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1167">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1168">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1169">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lfoundation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1170">The local foundation of the candidate to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="rfoundation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1171">The remote foundation of the candidate to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_remote_candidate"
              c:identifier="nice_agent_set_selected_remote_candidate">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1241">Sets the selected remote candidate for media transmission
for a given stream's component. This is used to force the selection of
a specific remote candidate even when connectivity checks are failing
(e.g. non-ICE compatible candidates).
Calling this function will disable all further ICE processing
(connection check, state machine updates, etc). Note that keepalives will
continue to be sent.</doc>
        <source-position filename="agent/agent.h" line="1259"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1256">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1243">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1244">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1245">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1246">The #NiceCandidate to select</doc>
            <type name="Candidate" c:type="NiceCandidate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_software"
              c:identifier="nice_agent_set_software"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1283">This function will set the value of the SOFTWARE attribute to be added to
STUN requests, responses and error responses sent during connectivity checks.
&lt;para&gt;
The SOFTWARE attribute will only be added in the #NICE_COMPATIBILITY_RFC5245
and #NICE_COMPATIBILITY_WLM2009 compatibility modes.

&lt;/para&gt;
&lt;note&gt;
     &lt;para&gt;
       The @software argument will be appended with the libnice version before
       being sent.
     &lt;/para&gt;
     &lt;para&gt;
       The @software argument must be in UTF-8 encoding and only the first
       128 characters will be sent.
     &lt;/para&gt;
   &lt;/note&gt;</doc>
        <source-position filename="agent/agent.h" line="1309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1285">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="software" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1286">The value of the SOFTWARE attribute to add.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stream_name"
              c:identifier="nice_agent_set_stream_name"
              version="0.1.4">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1313">This function will assign a media type to a stream. The only values
that can be used to produce a valid SDP are: "audio", "video",
"text", "application", "image" and "message".

This is only useful when parsing and generating an SDP of the
candidates.

&lt;para&gt;See also: nice_agent_generate_local_sdp()&lt;/para&gt;
&lt;para&gt;See also: nice_agent_parse_remote_sdp()&lt;/para&gt;
&lt;para&gt;See also: nice_agent_get_stream_name()&lt;/para&gt;</doc>
        <source-position filename="agent/agent.h" line="1334"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1330">%TRUE if the name has been set. %FALSE in case of error
(invalid stream or duplicate name).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1315">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1316">The ID of the stream to change</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1317">The new name of the stream or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stream_tos"
              c:identifier="nice_agent_set_stream_tos"
              version="0.0.9">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1266">Sets the IP_TOS and/or IPV6_TCLASS field on the stream's sockets' options</doc>
        <source-position filename="agent/agent.h" line="1276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1268">The #NiceAgent Object</doc>
            <type name="Agent" c:type="NiceAgent*"/>
          </instance-parameter>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1269">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="tos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.h"
                 line="1270">The ToS to set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bytestream-tcp"
                version="0.1.8"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="730">This property defines whether receive/send over a TCP or pseudo-TCP, in
reliable mode, are considered as packetized or as bytestream.
In unreliable mode, every send/recv is considered as packetized, and
this property is ignored and cannot be set.
&lt;para&gt;
In reliable mode, this property will always return %TRUE in the
%NICE_COMPATIBILITY_GOOGLE compatibility mode.
&lt;/para&gt;
If the property is %TRUE, the stream is considered in bytestream mode
and data can be read with any receive size. If the property is %FALSE, then
the stream is considred packetized and each receive will return one packet
of the same size as what was sent from the peer. If in packetized mode,
then doing a receive with a size smaller than the packet, will cause the
remaining bytes in the packet to be dropped, breaking the reliability
of the stream.
&lt;para&gt;
This property is currently read-only, and will become read/write once
bytestream mode will be supported.
&lt;/para&gt;</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="compatibility"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="376">The Nice agent can work in various compatibility modes depending on
what the application/peer needs.
&lt;para&gt; See also: #NiceCompatibility&lt;/para&gt;</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="controlling-mode" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="409">Whether the agent has the controlling role. This property should
be modified before gathering candidates, any modification occuring
later will be hold until ICE is restarted.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="force-relay"
                version="0.1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="787">Force all traffic to go through a relay for added privacy, this
allows hiding the local IP address. When this is enabled, so
local candidates are available before relay servers have been set
with nice_agent_set_relay_info().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="full-mode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ice-tcp"
                version="0.1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="697">Whether the agent should use ICE-TCP when gathering candidates.
If the option is disabled, no TCP candidates will be generated. If the
agent is in reliable mode, then pseudotcp will need to be used over UDP
candidates.
&lt;para&gt;
This option should be set before gathering candidates and should not be
modified afterwards.
&lt;/para&gt;
The #NiceAgent:ice-tcp property can be set at the same time as the
#NiceAgent:ice-udp property, but both cannot be unset at the same time.
If #NiceAgent:ice-udp is set to %FALSE, then this property cannot be set
to %FALSE as well.
&lt;note&gt;
   &lt;para&gt;
   ICE-TCP is only supported for %NICE_COMPATIBILITY_RFC5245,
   %NICE_COMPATIBILITY_OC2007 and %NICE_COMPATIBILITY_OC2007R2 compatibility
   modes.
   &lt;/para&gt;
&lt;/note&gt;</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ice-trickle"
                version="0.1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="875">Whether to perform Trickle ICE as per draft-ietf-ice-trickle-ice-21.
When %TRUE, the agent will postpone changing a component state to
%NICE_COMPONENT_STATE_FAILED until nice_agent_peer_candidate_gathering_done()
has been called with the ID of the component's stream.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ice-udp"
                version="0.1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="671">Whether the agent should use ICE-UDP when gathering candidates.
If the option is disabled, no UDP candidates will be generated. If the
agent is in reliable mode, then pseudotcp will not be used since pseudotcp
works on top of UDP candidates.
&lt;para&gt;
This option should be set before gathering candidates and should not be
modified afterwards.
&lt;/para&gt;
The #NiceAgent:ice-udp property can be set at the same time as the
#NiceAgent:ice-tcp property, but both cannot be unset at the same time.
If #NiceAgent:ice-tcp is set to %FALSE, then this property cannot be set
to %FALSE as well.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="idle-timeout"
                version="0.1.17"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="488">A final timeout in msec, launched when the agent becomes idle,
before stopping its activity.

This timer will delay the decision to set a component as failed.
This delay is added to reduce the chance to see the agent receiving
new stun activity just after the conncheck list has been declared
failed (some valid pairs, no nominated pair, and no in-progress
pairs), reactiviting conncheck activity, and causing a (valid)
state transitions like that: connecting -&gt; failed -&gt; connecting -&gt;
connected -&gt; ready.  Such transitions are not buggy per-se, but may
break the test-suite, that counts precisely the number of time each
state has been set, and doesnt expect these transcient failed
states.

This timer is also useful when the agent is in controlled mode and
the other controlling peer takes some time to elect its nominated
pair (this may be the case for SfB peers).

This timer is *NOT* part if the RFC5245, as this situation is not
covered in sect 8.1.2 "Updating States", but deals with a real
use-case, where a controlled agent can not wait forever for the
other peer to make a nomination decision.

Also note that the value of this timeout will not delay the
emission of 'connected' and 'ready' agent signals, and will not
slow down the behaviour of the agent when the peer agent works
in a timely manner.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="keepalive-conncheck"
                version="0.1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="763">Use binding requests as keepalives instead of binding
indications. This means that the keepalives may time out which
will change the component state to %NICE_COMPONENT_STATE_FAILED.

Enabing this is a slight violation of RFC 5245 section 10 which
recommends using Binding Indications for keepalives.

This is always enabled if the compatibility mode is
%NICE_COMPATIBILITY_GOOGLE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="main-context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="363">A GLib main context is needed for all timeouts used by libnice.
This is a property being set by the nice_agent_new() call.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="max-connectivity-checks"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="nomination-mode"
                version="0.1.15"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="452">The nomination mode used in the ICE specification for describing
the selection of valid pairs to be used upstream.
&lt;para&gt; See also: #NiceNominationMode &lt;/para&gt;</doc>
        <type/>
      </property>
      <property name="proxy-ip"
                version="0.0.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="533">The proxy server IP used to bypass a proxy firewall</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="proxy-password"
                version="0.0.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="595">The password used to authenticate with the proxy</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="proxy-port"
                version="0.0.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="548">The proxy server port used to bypass a proxy firewall</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="proxy-type"
                version="0.0.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="564">The type of proxy set in the proxy-ip property</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="proxy-username"
                version="0.0.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="580">The username used to authenticate with the proxy</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="reliable"
                version="0.0.11"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="655">Whether the agent is providing a reliable transport of messages (through
ICE-TCP or PseudoTCP over ICE-UDP)</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stun-initial-timeout"
                version="0.1.15"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="831">The initial timeout (msecs) of the STUN binding requests
used in the gathering stage, to find our local candidates.
This property is described as 'RTO' in the RFC 5389 and RFC 5245.
This timeout is doubled for each retransmission, until
#NiceAgent:stun-max-retransmissions have been done,
with an exception for the last restransmission, where the timeout is
divided by two instead (RFC 5389 indicates that a customisable
multiplier 'Rm' to 'RTO' should be used).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="stun-max-retransmissions"
                version="0.1.15"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="805">The maximum number of retransmissions of the STUN binding requests
used in the gathering stage, to find our local candidates, and used
in the connection check stage, to test the validity of each
constructed pair. This property is described as 'Rc' in the RFC
5389, with a default value of 7. The timeout of each STUN request
is doubled for each retransmission, so the choice of this value has
a direct impact on the time needed to move from the CONNECTED state
to the READY state, and on the time needed to complete the GATHERING
state.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="stun-pacing-timer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="stun-reliable-timeout"
                version="0.1.15"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="856">The initial timeout of the STUN binding requests used
for a reliable timer.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="stun-server" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="stun-server-port" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="support-renomination"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="470">Support RENOMINATION STUN attribute proposed here:
https://tools.ietf.org/html/draft-thatcher-ice-renomination-00 As
soon as RENOMINATION attribute is received from remote
candidate's address, corresponding candidates pair gets
selected. This is specific to Google Chrome/libWebRTC.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="upnp"
                version="0.0.7"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="610">Whether the agent should use UPnP to open a port in the router and
get the external IP</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="upnp-timeout"
                version="0.0.7"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="632">The maximum amount of time (in milliseconds) to wait for UPnP discovery to
finish before signaling the #NiceAgent::candidate-gathering-done signal</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="candidate-gathering-done" when="last">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="921">This signal is fired whenever a stream has finished gathering its
candidates after a call to nice_agent_gather_candidates()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="924">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="component-state-changed" when="last">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="895">This signal is fired whenever a component’s state changes. There are many
valid state transitions.

![State transition diagram](states.png)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="898">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="899">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="900">The new #NiceComponentState of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="initial-binding-request-received" when="last">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1031">This signal is fired when we received our first binding request from
the peer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1034">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-candidate"
                   when="last"
                   deprecated="1"
                   deprecated-version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="972">This signal is fired when the agent discovers a new local candidate.
When this signal is emitted, a matching #NiceAgent::new-candidate-full is
also emitted with the candidate.

See also: #NiceAgent::candidate-gathering-done,
#NiceAgent::new-candidate-full</doc>
        <doc-deprecated xml:space="preserve">Use #NiceAgent::new-candidate-full</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="975">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="976">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="foundation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="977">The foundation of the new candidate</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-candidate-full" when="last" version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1135">This signal is fired when the agent discovers a new local candidate.
When this signal is emitted, a matching #NiceAgent::new-candidate is
also emitted with the candidate's foundation.

See also: #NiceAgent::candidate-gathering-done,
#NiceAgent::new-candidate</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1138">The new #NiceCandidate</doc>
            <type name="Candidate"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-remote-candidate"
                   when="last"
                   deprecated="1"
                   deprecated-version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1001">This signal is fired when the agent discovers a new remote
candidate.  This can happen with peer reflexive candidates.  When
this signal is emitted, a matching
#NiceAgent::new-remote-candidate-full is also emitted with the
candidate.

See also: #NiceAgent::new-remote-candidate-full</doc>
        <doc-deprecated xml:space="preserve">Use #NiceAgent::new-remote-candidate-full</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1004">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1005">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="foundation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1006">The foundation of the new candidate</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-remote-candidate-full"
                   when="last"
                   version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1162">This signal is fired when the agent discovers a new remote candidate.
This can happen with peer reflexive candidates.
When this signal is emitted, a matching #NiceAgent::new-remote-candidate is
also emitted with the candidate's foundation.

See also: #NiceAgent::new-remote-candidate</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1165">The new #NiceCandidate</doc>
            <type name="Candidate"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-selected-pair"
                   when="last"
                   deprecated="1"
                   deprecated-version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="942">This signal is fired once a candidate pair is selected for data
transfer for a stream's component This is emitted along with
#NiceAgent::new-selected-pair-full which has the whole candidate,
the Foundation of a Candidate is not a unique identifier.

See also: #NiceAgent::new-selected-pair-full</doc>
        <doc-deprecated xml:space="preserve">Use #NiceAgent::new-selected-pair-full</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="945">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="946">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lfoundation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="947">The local foundation of the selected candidate pair</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="rfoundation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="948">The remote foundation of the selected candidate pair</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-selected-pair-full" when="last" version="0.1.8">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1107">This signal is fired once a candidate pair is selected for data
transfer for a stream's component. This is emitted along with
#NiceAgent::new-selected-pair.

See also: #NiceAgent::new-selected-pair</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1110">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1111">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="lcandidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1112">The local #NiceCandidate of the selected candidate pair</doc>
            <type name="Candidate"/>
          </parameter>
          <parameter name="rcandidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1113">The remote #NiceCandidate of the selected candidate pair</doc>
            <type name="Candidate"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reliable-transport-writable"
                   when="last"
                   version="0.0.11">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1053">This signal is fired on the reliable #NiceAgent when the underlying reliable
transport becomes writable.
This signal is only emitted when the nice_agent_send() function returns less
bytes than requested to send (or -1) and once when the connection
is established.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1056">The ID of the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="component_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1057">The ID of the component</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="streams-removed" when="last" version="0.1.5">
        <doc xml:space="preserve"
             filename="agent/agent.c"
             line="1081">This signal is fired whenever one or more streams are removed from the
@agent.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/agent.c"
                 line="1084">An array of
unsigned integer stream IDs, ending with a 0 ID</doc>
            <array>
              <type name="guint"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AgentClass"
            c:type="NiceAgentClass"
            glib:is-gtype-struct-for="Agent">
      <source-position filename="agent/agent.h" line="254"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="AgentOption" version="0.1.15" c:type="NiceAgentOption">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="401">These are options that can be passed to nice_agent_new_full(). They set
various properties on the agent. Not including them sets the property to
the other value.</doc>
      <source-position filename="agent/agent.h" line="423"/>
      <member name="regular_nomination"
              value="1"
              c:identifier="NICE_AGENT_OPTION_REGULAR_NOMINATION">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="403">Enables regular nomination, default
 is aggrssive mode (see #NiceNominationMode).</doc>
      </member>
      <member name="reliable"
              value="2"
              c:identifier="NICE_AGENT_OPTION_RELIABLE">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="405">Enables reliable mode, possibly using PseudoTCP, *  see nice_agent_new_reliable().</doc>
      </member>
      <member name="lite_mode"
              value="4"
              c:identifier="NICE_AGENT_OPTION_LITE_MODE">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="406">Enable lite mode</doc>
      </member>
      <member name="ice_trickle"
              value="8"
              c:identifier="NICE_AGENT_OPTION_ICE_TRICKLE">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="407">Enable ICE trickle mode</doc>
      </member>
      <member name="support_renomination"
              value="16"
              c:identifier="NICE_AGENT_OPTION_SUPPORT_RENOMINATION">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="408">Enable renomination triggered by NOMINATION STUN attribute
proposed here: https://tools.ietf.org/html/draft-thatcher-ice-renomination-00</doc>
      </member>
    </bitfield>
    <callback name="AgentRecvFunc" c:type="NiceAgentRecvFunc">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="425">Callback function when data is received on a component</doc>
      <source-position filename="agent/agent.h" line="438"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="427">The #NiceAgent Object</doc>
          <type name="Agent" c:type="NiceAgent*"/>
        </parameter>
        <parameter name="stream_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="428">The id of the stream</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="component_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="429">The id of the component of the stream
       which received the data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="431">The length of the data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="432">The buffer containing the data received</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="433">The user data set in nice_agent_attach_recv()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="CANDIDATE_MAX_FOUNDATION"
              value="33"
              c:type="NICE_CANDIDATE_MAX_FOUNDATION">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="64">The maximum size a candidate foundation can have.</doc>
      <source-position filename="agent/candidate.h" line="69"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CANDIDATE_MAX_LOCAL_ADDRESSES"
              value="64"
              c:type="NICE_CANDIDATE_MAX_LOCAL_ADDRESSES">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="78">The maximum number of local addresses. The constraint is that the
maximum number of local addresses and number of turn servers must
fit on 9 bits, to ensure candidate priority uniqueness. See also
@NICE_CANDIDATE_MAX_TURN_SERVERS. We choose 6 bits for the number of
local addresses, and 3 bits for the number of turn servers.</doc>
      <source-position filename="agent/candidate.h" line="87"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CANDIDATE_MAX_TURN_SERVERS"
              value="8"
              c:type="NICE_CANDIDATE_MAX_TURN_SERVERS">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="71">The maximum number of turns servers.</doc>
      <source-position filename="agent/candidate.h" line="76"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Candidate"
            c:type="NiceCandidate"
            glib:type-name="NiceCandidate"
            glib:get-type="nice_candidate_get_type"
            c:symbol-prefix="candidate">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="141">A structure to represent an ICE candidate
 &lt;note&gt;
   &lt;para&gt;
   The @priority is an integer as specified in the ICE draft 19. If you are
   using the MSN or the GOOGLE compatibility mode (which are based on ICE
   draft 6, which uses a floating point qvalue as priority), then the @priority
   value will represent the qvalue multiplied by 1000.
   &lt;/para&gt;
 &lt;/note&gt;</doc>
      <source-position filename="agent/candidate.h" line="178"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="143">The type of candidate</doc>
        <type name="CandidateType" c:type="NiceCandidateType"/>
      </field>
      <field name="transport" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="144">The transport being used for the candidate</doc>
        <type name="CandidateTransport" c:type="NiceCandidateTransport"/>
      </field>
      <field name="addr" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="145">The #NiceAddress of the candidate</doc>
        <type name="Address" c:type="NiceAddress"/>
      </field>
      <field name="base_addr" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="146">The #NiceAddress of the base address used by the candidate</doc>
        <type name="Address" c:type="NiceAddress"/>
      </field>
      <field name="priority" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="147">The priority of the candidate &lt;emphasis&gt; see note &lt;/emphasis&gt;</doc>
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="stream_id" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="148">The ID of the stream to which belongs the candidate</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="component_id" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="149">The ID of the component to which belongs the candidate</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="foundation" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="150">The foundation of the candidate</doc>
        <array zero-terminated="0" fixed-size="33">
          <type name="gchar" c:type="gchar"/>
        </array>
      </field>
      <field name="username" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="151">The candidate-specific username to use (overrides the one set
by nice_agent_set_local_credentials() or nice_agent_set_remote_credentials())</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="password" writable="1">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="153">The candidate-specific password to use (overrides the one set
by nice_agent_set_local_credentials() or nice_agent_set_remote_credentials())</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="nice_candidate_new">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="180">Creates a new candidate. Must be freed with nice_candidate_free()</doc>
        <source-position filename="agent/candidate.h" line="189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="186">A new #NiceCandidate</doc>
          <type name="Candidate" c:type="NiceCandidate*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="182">The #NiceCandidateType of the candidate to create</doc>
            <type name="CandidateType" c:type="NiceCandidateType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="nice_candidate_copy">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="200">Makes a copy of a #NiceCandidate</doc>
        <source-position filename="agent/candidate.h" line="209"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="206">A new #NiceCandidate, a copy of @candidate</doc>
          <type name="Candidate" c:type="NiceCandidate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="202">The candidate to copy</doc>
            <type name="Candidate" c:type="const NiceCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal_target"
              c:identifier="nice_candidate_equal_target"
              version="0.1.15">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="211">Verifies that the candidates point to the same place, meaning they have
the same transport and the same address. It ignores all other aspects.</doc>
        <source-position filename="agent/candidate.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="219">%TRUE if the candidates point to the same place</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="213">A candidate</doc>
            <type name="Candidate" c:type="const NiceCandidate*"/>
          </instance-parameter>
          <parameter name="candidate2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="214">A candidate</doc>
            <type name="Candidate" c:type="const NiceCandidate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="nice_candidate_free">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="191">Frees a #NiceCandidate</doc>
        <source-position filename="agent/candidate.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="candidate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="193">The candidate to free</doc>
            <type name="Candidate" c:type="NiceCandidate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="transport_to_string"
                c:identifier="nice_candidate_transport_to_string"
                version="0.1.18">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="243">Useful for debugging functions, just returns a static string with the
candidate transport.</doc>
        <source-position filename="agent/candidate.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="250">a static string with the candidate transport</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="245">a #NiceCandidateTransport</doc>
            <type name="CandidateTransport" c:type="NiceCandidateTransport"/>
          </parameter>
        </parameters>
      </function>
      <function name="type_to_string"
                c:identifier="nice_candidate_type_to_string"
                version="0.1.18">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="229">Useful for debugging functions, just returns a static string with the
candidate type.</doc>
        <source-position filename="agent/candidate.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="236">a static string with the candidate type</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="agent/candidate.h"
                 line="231">a #NiceCandidateType</doc>
            <type name="CandidateType" c:type="NiceCandidateType"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="CandidateTransport" c:type="NiceCandidateTransport">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="106">An enum representing the type of transport to use</doc>
      <source-position filename="agent/candidate.h" line="121"/>
      <member name="udp" value="0" c:identifier="NICE_CANDIDATE_TRANSPORT_UDP">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="108">UDP transport</doc>
      </member>
      <member name="tcp_active"
              value="1"
              c:identifier="NICE_CANDIDATE_TRANSPORT_TCP_ACTIVE">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="109">TCP Active transport</doc>
      </member>
      <member name="tcp_passive"
              value="2"
              c:identifier="NICE_CANDIDATE_TRANSPORT_TCP_PASSIVE">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="110">TCP Passive transport</doc>
      </member>
      <member name="tcp_so"
              value="3"
              c:identifier="NICE_CANDIDATE_TRANSPORT_TCP_SO">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="111">TCP Simultaneous-Open transport</doc>
      </member>
    </enumeration>
    <enumeration name="CandidateType" c:type="NiceCandidateType">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="89">An enum represneting the type of a candidate</doc>
      <source-position filename="agent/candidate.h" line="104"/>
      <member name="host" value="0" c:identifier="NICE_CANDIDATE_TYPE_HOST">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="91">A host candidate</doc>
      </member>
      <member name="server_reflexive"
              value="1"
              c:identifier="NICE_CANDIDATE_TYPE_SERVER_REFLEXIVE">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="92">A server reflexive candidate</doc>
      </member>
      <member name="peer_reflexive"
              value="2"
              c:identifier="NICE_CANDIDATE_TYPE_PEER_REFLEXIVE">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="93">A peer reflexive candidate</doc>
      </member>
      <member name="relayed"
              value="3"
              c:identifier="NICE_CANDIDATE_TYPE_RELAYED">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="94">A relay candidate</doc>
      </member>
    </enumeration>
    <enumeration name="Compatibility" c:type="NiceCompatibility">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="317">An enum to specify which compatible specifications the #NiceAgent should use.
Use with nice_agent_new()

&lt;warning&gt;@NICE_COMPATIBILITY_DRAFT19 is deprecated and should not be used
in newly-written code. It is kept for compatibility reasons and
represents the same compatibility as @NICE_COMPATIBILITY_RFC5245 &lt;/warning&gt;
 &lt;note&gt;
   &lt;para&gt;
   If @NICE_COMPATIBILITY_RFC5245 compatibility mode is used for a non-reliable
   agent, then ICE-UDP will be used with higher priority and ICE-TCP will also
   be used when the UDP connectivity fails. If it is used with a reliable agent,
   then ICE-UDP will be used with the TCP-Over-UDP (#PseudoTcpSocket) if ICE-TCP
   fails and ICE-UDP succeeds.
  &lt;/para&gt;
 &lt;/note&gt;</doc>
      <source-position filename="agent/agent.h" line="357"/>
      <member name="rfc5245"
              value="0"
              c:identifier="NICE_COMPATIBILITY_RFC5245">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="319">Use compatibility with the RFC5245 ICE-UDP specs
and RFC6544 ICE-TCP specs</doc>
      </member>
      <member name="draft19"
              value="0"
              c:identifier="NICE_COMPATIBILITY_DRAFT19">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="327">Use compatibility for ICE Draft 19 specs</doc>
      </member>
      <member name="google" value="1" c:identifier="NICE_COMPATIBILITY_GOOGLE">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="321">Use compatibility for Google Talk specs</doc>
      </member>
      <member name="msn" value="2" c:identifier="NICE_COMPATIBILITY_MSN">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="322">Use compatibility for MSN Messenger specs</doc>
      </member>
      <member name="wlm2009"
              value="3"
              c:identifier="NICE_COMPATIBILITY_WLM2009">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="323">Use compatibility with Windows Live Messenger
2009</doc>
      </member>
      <member name="oc2007" value="4" c:identifier="NICE_COMPATIBILITY_OC2007">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="325">Use compatibility with Microsoft Office Communicator 2007</doc>
      </member>
      <member name="oc2007r2"
              value="5"
              c:identifier="NICE_COMPATIBILITY_OC2007R2">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="326">Use compatibility with Microsoft Office Communicator 2007 R2</doc>
      </member>
      <member name="last" value="5" c:identifier="NICE_COMPATIBILITY_LAST">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="328">Dummy last compatibility mode</doc>
      </member>
    </enumeration>
    <enumeration name="ComponentState" c:type="NiceComponentState">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="269">An enum representing the state of a component.
&lt;para&gt; See also: #NiceAgent::component-state-changed &lt;/para&gt;</doc>
      <source-position filename="agent/agent.h" line="293"/>
      <member name="disconnected"
              value="0"
              c:identifier="NICE_COMPONENT_STATE_DISCONNECTED">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="271">No activity scheduled</doc>
      </member>
      <member name="gathering"
              value="1"
              c:identifier="NICE_COMPONENT_STATE_GATHERING">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="272">Gathering local candidates</doc>
      </member>
      <member name="connecting"
              value="2"
              c:identifier="NICE_COMPONENT_STATE_CONNECTING">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="273">Establishing connectivity</doc>
      </member>
      <member name="connected"
              value="3"
              c:identifier="NICE_COMPONENT_STATE_CONNECTED">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="274">At least one working candidate pair</doc>
      </member>
      <member name="ready" value="4" c:identifier="NICE_COMPONENT_STATE_READY">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="275">ICE concluded, candidate pair selection
is now final</doc>
      </member>
      <member name="failed"
              value="5"
              c:identifier="NICE_COMPONENT_STATE_FAILED">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="277">Connectivity checks have been completed,
but connectivity was not established</doc>
      </member>
      <member name="last" value="6" c:identifier="NICE_COMPONENT_STATE_LAST">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="279">Dummy state</doc>
      </member>
    </enumeration>
    <enumeration name="ComponentType" c:type="NiceComponentType">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="296">Convenience enum representing the type of a component for use as the
component_id for RTP/RTCP usages.
 &lt;example&gt;
   &lt;title&gt;Example of use.&lt;/title&gt;
   &lt;programlisting&gt;
   nice_agent_send (agent, stream_id, NICE_COMPONENT_TYPE_RTP, len, buf);
   &lt;/programlisting&gt;
  &lt;/example&gt;</doc>
      <source-position filename="agent/agent.h" line="314"/>
      <member name="rtp" value="1" c:identifier="NICE_COMPONENT_TYPE_RTP">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="298">RTP Component type</doc>
      </member>
      <member name="rtcp" value="2" c:identifier="NICE_COMPONENT_TYPE_RTCP">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="299">RTCP Component type</doc>
      </member>
    </enumeration>
    <function-macro name="IS_AGENT"
                    c:identifier="NICE_IS_AGENT"
                    introspectable="0">
      <source-position filename="agent/agent.h" line="237"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AGENT_CLASS"
                    c:identifier="NICE_IS_AGENT_CLASS"
                    introspectable="0">
      <source-position filename="agent/agent.h" line="241"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <record name="InputMessage" c:type="NiceInputMessage" version="0.1.5">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="165">Represents a single message received off the network. For reliable
connections, this is essentially just an array of buffers (specifically,
@from can be ignored). for non-reliable connections, it represents a single
packet as received from the OS.

@n_buffers may be -1 to indicate that @buffers is terminated by a
#GInputVector with a %NULL buffer pointer.

By providing arrays of #NiceInputMessages to functions like
nice_agent_recv_messages(), multiple messages may be received with a single
call, which is more efficient than making multiple calls in a loop. In this
manner, nice_agent_recv_messages() is analogous to recvmmsg(); and
#NiceInputMessage to struct mmsghdr.</doc>
      <source-position filename="agent/agent.h" line="196"/>
      <field name="buffers" writable="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="167">unowned array of #GInputVector buffers to
store data in for this message</doc>
        <array length="1" zero-terminated="0" c:type="GInputVector*">
          <type name="Gio.InputVector" c:type="GInputVector"/>
        </array>
      </field>
      <field name="n_buffers" writable="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="169">number of #GInputVectors in @buffers, or -1 to indicate @buffers
is %NULL-terminated</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="from" writable="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="171">return location to store the address of the peer who
transmitted the message, or %NULL</doc>
        <type name="Address" c:type="NiceAddress*"/>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="173">total number of valid bytes contiguously stored in @buffers</doc>
        <type name="gsize" c:type="gsize"/>
      </field>
    </record>
    <enumeration name="NominationMode"
                 version="0.1.15"
                 c:type="NiceNominationMode">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="380">An enum to specity the kind of nomination mode to use by
the agent, as described in RFC 5245. Two modes exists,
regular and aggressive. They differ by the way the controlling
agent chooses to put the USE-CANDIDATE attribute in its STUN
messages. The aggressive mode is supposed to nominate a pair
faster, than the regular mode, potentially causing the nominated
pair to change until the connection check completes.</doc>
      <source-position filename="agent/agent.h" line="399"/>
      <member name="regular"
              value="0"
              c:identifier="NICE_NOMINATION_MODE_REGULAR">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="383">Regular nomination mode</doc>
      </member>
      <member name="aggressive"
              value="1"
              c:identifier="NICE_NOMINATION_MODE_AGGRESSIVE">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="382">Aggressive nomination mode</doc>
      </member>
    </enumeration>
    <record name="OutputMessage" c:type="NiceOutputMessage" version="0.1.5">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="198">Represents a single message to transmit on the network. For
reliable connections, this is essentially just an array of
buffer. for non-reliable connections, it represents a single packet
to send to the OS.

@n_buffers may be -1 to indicate that @buffers is terminated by a
#GOutputVector with a %NULL buffer pointer.

By providing arrays of #NiceOutputMessages to functions like
nice_agent_send_messages_nonblocking(), multiple messages may be transmitted
with a single call, which is more efficient than making multiple calls in a
loop. In this manner, nice_agent_send_messages_nonblocking() is analogous to
sendmmsg(); and #NiceOutputMessage to struct mmsghdr.</doc>
      <source-position filename="agent/agent.h" line="224"/>
      <field name="buffers" writable="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="200">unowned array of #GOutputVector buffers
which contain data to transmit for this message</doc>
        <array length="1" zero-terminated="0" c:type="GOutputVector*">
          <type name="Gio.OutputVector" c:type="GOutputVector"/>
        </array>
      </field>
      <field name="n_buffers" writable="1">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="202">number of #GOutputVectors in @buffers, or -1 to indicate @buffers
is %NULL-terminated</doc>
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <enumeration name="ProxyType" version="0.0.4" c:type="NiceProxyType">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="359">An enum to specify which proxy type to use for relaying.
Note that the proxies will only be used with TCP TURN relaying.
&lt;para&gt; See also: #NiceAgent:proxy-type &lt;/para&gt;</doc>
      <source-position filename="agent/agent.h" line="378"/>
      <member name="none" value="0" c:identifier="NICE_PROXY_TYPE_NONE">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="361">Do not use a proxy</doc>
      </member>
      <member name="socks5" value="1" c:identifier="NICE_PROXY_TYPE_SOCKS5">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="362">Use a SOCKS5 proxy</doc>
      </member>
      <member name="http" value="2" c:identifier="NICE_PROXY_TYPE_HTTP">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="363">Use an HTTP proxy</doc>
      </member>
      <member name="last" value="2" c:identifier="NICE_PROXY_TYPE_LAST">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="364">Dummy last proxy type</doc>
      </member>
    </enumeration>
    <enumeration name="RelayType" c:type="NiceRelayType">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="123">An enum representing the type of relay to use</doc>
      <source-position filename="agent/candidate.h" line="135"/>
      <member name="udp" value="0" c:identifier="NICE_RELAY_TYPE_TURN_UDP">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="125">A TURN relay using UDP</doc>
      </member>
      <member name="tcp" value="1" c:identifier="NICE_RELAY_TYPE_TURN_TCP">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="126">A TURN relay using TCP</doc>
      </member>
      <member name="tls" value="2" c:identifier="NICE_RELAY_TYPE_TURN_TLS">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="127">A TURN relay using TLS over TCP</doc>
      </member>
    </enumeration>
    <docsection name="address">
      <doc xml:space="preserve"
           filename="agent/address.h"
           line="43">The #NiceAddress structure will allow you to easily set/get and modify an IPv4
or IPv6 address in order to communicate with the #NiceAgent.</doc>
    </docsection>
    <docsection name="agent">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="43">The #NiceAgent is your main object when using libnice.
It is the agent that will take care of everything relating to ICE.
It will take care of discovering your local candidates and do
 connectivity checks to create a stream of data between you and your peer.

A #NiceAgent must always be used with a #GMainLoop running the #GMainContext
passed into nice_agent_new() (or nice_agent_new_reliable()). Without the
#GMainContext being iterated, the agent’s timers will not fire, etc.

Streams and their components are referenced by integer IDs (with respect to a
given #NiceAgent). These IDs are guaranteed to be positive (i.e. non-zero)
for valid streams/components.

To complete the ICE connectivity checks, the user must either register
an I/O callback (with nice_agent_attach_recv()) or call nice_agent_recv_messages()
in a loop on a dedicated thread.
Technically, #NiceAgent does not poll the streams on its own, since
user data could arrive at any time; to receive STUN packets
required for establishing ICE connectivity, it is backpiggying
on the facility chosen by the user. #NiceAgent will handle all STUN
packets internally; they're never actually passed to the I/O callback
or returned from nice_agent_recv_messages() and related functions.

Each stream can receive data in one of two ways: using
nice_agent_attach_recv() or nice_agent_recv_messages() (and the derived
#NiceInputStream and #NiceIOStream classes accessible using
nice_agent_get_io_stream()). nice_agent_attach_recv() is non-blocking: it
takes a user-provided callback function and attaches the stream’s socket to
the provided #GMainContext, invoking the callback in that context for every
packet received. nice_agent_recv_messages() instead blocks on receiving a
packet, and writes it directly into a user-provided buffer. This reduces the
number of callback invokations and (potentially) buffer copies required to
receive packets. nice_agent_recv_messages() (or #NiceInputStream) is designed
to be used in a blocking loop in a separate thread.

&lt;example&gt;
  &lt;title&gt;Simple example on how to use libnice&lt;/title&gt;
  &lt;programlisting&gt;
  guint stream_id;
  gchar buffer[] = "hello world!";
  gchar *ufrag = NULL, *pwd = NULL;
  gchar *remote_ufrag, *remote_pwd;
  GSList *lcands = NULL;

  // Create a nice agent, passing in the global default GMainContext.
  NiceAgent *agent = nice_agent_new (NULL, NICE_COMPATIBILITY_RFC5245);
  spawn_thread_to_run_main_loop (g_main_loop_new (NULL, FALSE));

  // Connect the signals
  g_signal_connect (G_OBJECT (agent), "candidate-gathering-done",
                    G_CALLBACK (cb_candidate_gathering_done), NULL);
  g_signal_connect (G_OBJECT (agent), "component-state-changed",
                    G_CALLBACK (cb_component_state_changed), NULL);
  g_signal_connect (G_OBJECT (agent), "new-selected-pair",
                    G_CALLBACK (cb_new_selected_pair), NULL);

  // Create a new stream with one component and start gathering candidates
  stream_id = nice_agent_add_stream (agent, 1);
  nice_agent_gather_candidates (agent, stream_id);

  // Attach I/O callback the component to ensure that:
  // 1) agent gets its STUN packets (not delivered to cb_nice_recv)
  // 2) you get your own data
  nice_agent_attach_recv (agent, stream_id, 1, NULL,
                         cb_nice_recv, NULL);

  // ... Wait until the signal candidate-gathering-done is fired ...
  lcands = nice_agent_get_local_candidates(agent, stream_id, 1);

  nice_agent_get_local_credentials(agent, stream_id, &amp;ufrag, &amp;pwd);

  // ... Send local candidates and credentials to the peer

  // Set the peer's remote credentials and remote candidates
  nice_agent_set_remote_credentials (agent, stream_id, remote_ufrag, remote_pwd);
  nice_agent_set_remote_candidates (agent, stream_id, 1, rcands);

  // ... Wait until the signal new-selected-pair is fired ...
  // Send our message!
  nice_agent_send (agent, stream_id, 1, sizeof(buffer), buffer);

  // Anything received will be received through the cb_nice_recv callback.
  // You must be running a GMainLoop on the global default GMainContext in
  // another thread for this to work.

  // Destroy the object
  g_object_unref(agent);

  &lt;/programlisting&gt;
&lt;/example&gt;

Refer to the examples in the examples/ subdirectory of the libnice source for
more complete examples.</doc>
    </docsection>
    <docsection name="candidate">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="47">A representation of an ICE candidate. Make sure you read the ICE drafts[1] to
understand correctly the concept of ICE candidates.

[1] http://tools.ietf.org/wg/mmusic/draft-ietf-mmusic-ice/</doc>
    </docsection>
    <function name="candidate_transport_to_string"
              c:identifier="nice_candidate_transport_to_string"
              moved-to="Candidate.transport_to_string"
              version="0.1.18">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="243">Useful for debugging functions, just returns a static string with the
candidate transport.</doc>
      <source-position filename="agent/candidate.h" line="255"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="250">a static string with the candidate transport</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="transport" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="245">a #NiceCandidateTransport</doc>
          <type name="CandidateTransport" c:type="NiceCandidateTransport"/>
        </parameter>
      </parameters>
    </function>
    <function name="candidate_type_to_string"
              c:identifier="nice_candidate_type_to_string"
              moved-to="Candidate.type_to_string"
              version="0.1.18">
      <doc xml:space="preserve"
           filename="agent/candidate.h"
           line="229">Useful for debugging functions, just returns a static string with the
candidate type.</doc>
      <source-position filename="agent/candidate.h" line="241"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/candidate.h"
             line="236">a static string with the candidate type</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/candidate.h"
               line="231">a #NiceCandidateType</doc>
          <type name="CandidateType" c:type="NiceCandidateType"/>
        </parameter>
      </parameters>
    </function>
    <function name="component_state_to_string"
              c:identifier="nice_component_state_to_string"
              version="0.1.6">
      <doc xml:space="preserve"
           filename="agent/agent.h"
           line="1588">Returns a string representation of the state, generally to use in debug
messages.</doc>
      <source-position filename="agent/agent.h" line="1599"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="agent/agent.h"
             line="1595">a string representation of @state</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="state" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="agent/agent.h"
               line="1590">a #NiceComponentState</doc>
          <type name="ComponentState" c:type="NiceComponentState"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
