// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum CandidateTransport {
    Udp,
    TcpActive,
    TcpPassive,
    TcpSo,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CandidateTransport {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CandidateTransport::{}", match *self {
            CandidateTransport::Udp => "Udp",
            CandidateTransport::TcpActive => "TcpActive",
            CandidateTransport::TcpPassive => "TcpPassive",
            CandidateTransport::TcpSo => "TcpSo",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for CandidateTransport {
    type GlibType = ffi::NiceCandidateTransport;

    fn to_glib(&self) -> ffi::NiceCandidateTransport {
        match *self {
            CandidateTransport::Udp => ffi::NICE_CANDIDATE_TRANSPORT_UDP,
            CandidateTransport::TcpActive => ffi::NICE_CANDIDATE_TRANSPORT_TCP_ACTIVE,
            CandidateTransport::TcpPassive => ffi::NICE_CANDIDATE_TRANSPORT_TCP_PASSIVE,
            CandidateTransport::TcpSo => ffi::NICE_CANDIDATE_TRANSPORT_TCP_SO,
            CandidateTransport::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceCandidateTransport> for CandidateTransport {
    unsafe fn from_glib(value: ffi::NiceCandidateTransport) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CandidateTransport::Udp,
            1 => CandidateTransport::TcpActive,
            2 => CandidateTransport::TcpPassive,
            3 => CandidateTransport::TcpSo,
            value => CandidateTransport::__Unknown(value),
}
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum CandidateType {
    Host,
    ServerReflexive,
    PeerReflexive,
    Relayed,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CandidateType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CandidateType::{}", match *self {
            CandidateType::Host => "Host",
            CandidateType::ServerReflexive => "ServerReflexive",
            CandidateType::PeerReflexive => "PeerReflexive",
            CandidateType::Relayed => "Relayed",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for CandidateType {
    type GlibType = ffi::NiceCandidateType;

    fn to_glib(&self) -> ffi::NiceCandidateType {
        match *self {
            CandidateType::Host => ffi::NICE_CANDIDATE_TYPE_HOST,
            CandidateType::ServerReflexive => ffi::NICE_CANDIDATE_TYPE_SERVER_REFLEXIVE,
            CandidateType::PeerReflexive => ffi::NICE_CANDIDATE_TYPE_PEER_REFLEXIVE,
            CandidateType::Relayed => ffi::NICE_CANDIDATE_TYPE_RELAYED,
            CandidateType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceCandidateType> for CandidateType {
    unsafe fn from_glib(value: ffi::NiceCandidateType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CandidateType::Host,
            1 => CandidateType::ServerReflexive,
            2 => CandidateType::PeerReflexive,
            3 => CandidateType::Relayed,
            value => CandidateType::__Unknown(value),
}
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum Compatibility {
    Rfc5245,
    Google,
    Msn,
    Wlm2009,
    Oc2007,
    Oc2007r2,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Compatibility {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Compatibility::{}", match *self {
            Compatibility::Rfc5245 => "Rfc5245",
            Compatibility::Google => "Google",
            Compatibility::Msn => "Msn",
            Compatibility::Wlm2009 => "Wlm2009",
            Compatibility::Oc2007 => "Oc2007",
            Compatibility::Oc2007r2 => "Oc2007r2",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Compatibility {
    type GlibType = ffi::NiceCompatibility;

    fn to_glib(&self) -> ffi::NiceCompatibility {
        match *self {
            Compatibility::Rfc5245 => ffi::NICE_COMPATIBILITY_RFC5245,
            Compatibility::Google => ffi::NICE_COMPATIBILITY_GOOGLE,
            Compatibility::Msn => ffi::NICE_COMPATIBILITY_MSN,
            Compatibility::Wlm2009 => ffi::NICE_COMPATIBILITY_WLM2009,
            Compatibility::Oc2007 => ffi::NICE_COMPATIBILITY_OC2007,
            Compatibility::Oc2007r2 => ffi::NICE_COMPATIBILITY_OC2007R2,
            Compatibility::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceCompatibility> for Compatibility {
    unsafe fn from_glib(value: ffi::NiceCompatibility) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Compatibility::Rfc5245,
            1 => Compatibility::Google,
            2 => Compatibility::Msn,
            3 => Compatibility::Wlm2009,
            4 => Compatibility::Oc2007,
            5 => Compatibility::Oc2007r2,
            value => Compatibility::__Unknown(value),
}
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum ComponentState {
    Disconnected,
    Gathering,
    Connecting,
    Connected,
    Ready,
    Failed,
    Last,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ComponentState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ComponentState::{}", match *self {
            ComponentState::Disconnected => "Disconnected",
            ComponentState::Gathering => "Gathering",
            ComponentState::Connecting => "Connecting",
            ComponentState::Connected => "Connected",
            ComponentState::Ready => "Ready",
            ComponentState::Failed => "Failed",
            ComponentState::Last => "Last",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for ComponentState {
    type GlibType = ffi::NiceComponentState;

    fn to_glib(&self) -> ffi::NiceComponentState {
        match *self {
            ComponentState::Disconnected => ffi::NICE_COMPONENT_STATE_DISCONNECTED,
            ComponentState::Gathering => ffi::NICE_COMPONENT_STATE_GATHERING,
            ComponentState::Connecting => ffi::NICE_COMPONENT_STATE_CONNECTING,
            ComponentState::Connected => ffi::NICE_COMPONENT_STATE_CONNECTED,
            ComponentState::Ready => ffi::NICE_COMPONENT_STATE_READY,
            ComponentState::Failed => ffi::NICE_COMPONENT_STATE_FAILED,
            ComponentState::Last => ffi::NICE_COMPONENT_STATE_LAST,
            ComponentState::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceComponentState> for ComponentState {
    unsafe fn from_glib(value: ffi::NiceComponentState) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ComponentState::Disconnected,
            1 => ComponentState::Gathering,
            2 => ComponentState::Connecting,
            3 => ComponentState::Connected,
            4 => ComponentState::Ready,
            5 => ComponentState::Failed,
            6 => ComponentState::Last,
            value => ComponentState::__Unknown(value),
}
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum ComponentType {
    Rtp,
    Rtcp,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ComponentType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ComponentType::{}", match *self {
            ComponentType::Rtp => "Rtp",
            ComponentType::Rtcp => "Rtcp",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for ComponentType {
    type GlibType = ffi::NiceComponentType;

    fn to_glib(&self) -> ffi::NiceComponentType {
        match *self {
            ComponentType::Rtp => ffi::NICE_COMPONENT_TYPE_RTP,
            ComponentType::Rtcp => ffi::NICE_COMPONENT_TYPE_RTCP,
            ComponentType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceComponentType> for ComponentType {
    unsafe fn from_glib(value: ffi::NiceComponentType) -> Self {
        skip_assert_initialized!();
        match value {
            1 => ComponentType::Rtp,
            2 => ComponentType::Rtcp,
            value => ComponentType::__Unknown(value),
}
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum NominationMode {
    Regular,
    Aggressive,
#[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
impl fmt::Display for NominationMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "NominationMode::{}", match *self {
            NominationMode::Regular => "Regular",
            NominationMode::Aggressive => "Aggressive",
            _ => "Unknown",
        })
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl ToGlib for NominationMode {
    type GlibType = ffi::NiceNominationMode;

    fn to_glib(&self) -> ffi::NiceNominationMode {
        match *self {
            NominationMode::Regular => ffi::NICE_NOMINATION_MODE_REGULAR,
            NominationMode::Aggressive => ffi::NICE_NOMINATION_MODE_AGGRESSIVE,
            NominationMode::__Unknown(value) => value,
}
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl FromGlib<ffi::NiceNominationMode> for NominationMode {
    unsafe fn from_glib(value: ffi::NiceNominationMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => NominationMode::Regular,
            1 => NominationMode::Aggressive,
            value => NominationMode::__Unknown(value),
}
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum ProxyType {
    None,
    Socks5,
    Http,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ProxyType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ProxyType::{}", match *self {
            ProxyType::None => "None",
            ProxyType::Socks5 => "Socks5",
            ProxyType::Http => "Http",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for ProxyType {
    type GlibType = ffi::NiceProxyType;

    fn to_glib(&self) -> ffi::NiceProxyType {
        match *self {
            ProxyType::None => ffi::NICE_PROXY_TYPE_NONE,
            ProxyType::Socks5 => ffi::NICE_PROXY_TYPE_SOCKS5,
            ProxyType::Http => ffi::NICE_PROXY_TYPE_HTTP,
            ProxyType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceProxyType> for ProxyType {
    unsafe fn from_glib(value: ffi::NiceProxyType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ProxyType::None,
            1 => ProxyType::Socks5,
            2 => ProxyType::Http,
            value => ProxyType::__Unknown(value),
}
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum RelayType {
    Udp,
    Tcp,
    Tls,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for RelayType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RelayType::{}", match *self {
            RelayType::Udp => "Udp",
            RelayType::Tcp => "Tcp",
            RelayType::Tls => "Tls",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for RelayType {
    type GlibType = ffi::NiceRelayType;

    fn to_glib(&self) -> ffi::NiceRelayType {
        match *self {
            RelayType::Udp => ffi::NICE_RELAY_TYPE_TURN_UDP,
            RelayType::Tcp => ffi::NICE_RELAY_TYPE_TURN_TCP,
            RelayType::Tls => ffi::NICE_RELAY_TYPE_TURN_TLS,
            RelayType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceRelayType> for RelayType {
    unsafe fn from_glib(value: ffi::NiceRelayType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => RelayType::Udp,
            1 => RelayType::Tcp,
            2 => RelayType::Tls,
            value => RelayType::__Unknown(value),
}
    }
}

